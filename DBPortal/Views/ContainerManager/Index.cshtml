@using DBPortal.Models
@model IEnumerable<Container>

@{
    Layout = "_Layout";
    ViewData["Title"] = "Database Portal";
}

@section Scripts
{
    <script>
    function newContainer() {
        httpPostAsync('@Url.Action("NewMySqlContainer")', '', null);
    }
    </script>
}

<div class="row">
    <div class="col">
        <h1>Conatiner List</h1>
    </div>
    <div class="md-3" style="padding: 10px 40px 0 0">
        <button class="btn btn-primary" onclick="newContainer()">
            <strong>New Container</strong>
        </button>
    </div>
</div>
<div class="row" style="margin: 40px 40px 0 40px;">
    @if (!Model.Any())
    {
        <p>No containers</p>
    }
    else
    {
        @foreach (var container in Model)
        {
            <div class="mb-3" style="padding: 10px">
                <div class="card bg-light" style="width: 20rem;">
                    <div class="card-header">
                        @if (container.IsMySqlContainer)
                        {
                            <strong>Database : @container.FriendlyName()</strong>
                        }
                        else
                        {
                            <strong>Container : @container.FriendlyName()</strong>
                        }
                    </div>
                    <div class="card-body">
                        <h6 class="card-subtitle text-muted" style="margin: 5px 0">Image: @container.Image</h6>
                        <h6 class="card-subtitle text-muted" style="margin: 5px 0">State: @container.State</h6>
                    </div>
                    <div class="card-footer">
                        <a href="@Url.Action("Container", new {id = container.Id})" class="btn btn-secondary stretched-link">
                            View Container
                        </a>
                    </div>
                </div>
            </div>
        }
    }
</div>